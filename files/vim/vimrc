" NOT Vi compatible
set nocompatible

""""""""""""""""""""""""
" TERMINAL SETTINGS
""""""""""""""""""""""""
"
set t_Co=256
" Fast terminal connection
set ttyfast 

""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""
:filetype plugin on

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plug
call plug#begin('~/.vim/plugged')

" alvan/vim-closetag
Plug 'alvan/vim-closetag'

" auto-pairs
Plug 'jiangmiao/auto-pairs'

" surround
Plug 'tpope/vim-surround'

" windowswap
Plug 'wesQ3/vim-windowswap'

" peekaboo
Plug 'junegunn/vim-peekaboo'

" polyglot
Plug 'sheerun/vim-polyglot'

" ale (used with eslint)
Plug 'dense-analysis/ale'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'}

call plug#end()

" ===============
" PLUGIN MAPPINGS

" FZF
nmap <C-P> :Files<CR>
command F Files

" Windowswap
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>"

" ===============

""""""""""""""""""""""""
" VISUALS
""""""""""""""""""""""""
" Syntax (lexical) highlighting and color schemes
syntax enable
colorscheme onedark
set background=dark

" Line numbers
set number relativenumber " set nu rnu
set numberwidth=4

" Highlight the whole line under the cursor
set cursorline

""""""""""""""""""""""""
" SEARCHING
""""""""""""""""""""""""
" highlight search pattern
set hlsearch

" jump to matching bracket
set showmatch

" case insensitive searching
set ignorecase
" if ignorecase, then uppercase chars force case sensitive searching
set smartcase

" show the `best match so far' as search strings are typed:
set incsearch

" assume the /g flag on :s substitutions to replace all matches in a line:
set gdefault

""""""""""""""""""""""""
" BEHAVIORS
""""""""""""""""""""""""
" Save last 500 lines of history
set history=500

" Tab completion COMMAND LINE (only)
" list all matches:complete till longest common string,next full match
set wildmode=list:longest,full

" display the current mode and partially-typed commands in the status line:
set showmode
set showcmd

" Allow bkspc to delete over auto-indent, line-breaks, and instert start
set backspace=indent,eol,start " same as backspace=2

" Always show the ruler with current position info
set ruler

" Indentation
" Auto-indent with smarts
set autoindent
set smartindent
"Set tab spacing to 4 
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set shiftround

" Code folding
set nofoldenable
set foldmethod=indent
set foldlevel=2
set foldclose=all

" normally don't automatically format `text' as it is typed, IE only do this
" with comments, at 80 characters:
set formatoptions-=t
set textwidth=80

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make set noexpandtab shiftwidth=8

" use "[RO]" for "[readonly]" to save space in the message line:
set shortmess+=r
set shortmess+=I

""""""""""""""""""""""""
" REMAP
""""""""""""""""""""""""
" Remap ESC to the quickly typed characters jk
inoremap jk <esc>

" Remap ; to : 
nnoremap ; :

command V :vert term

" Pane navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap j k and to treat 'false' new lines as new line, also keep center
nnoremap j gjzz
nnoremap k gkzz
" Also do it for all the other stuff
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz



""""""""""""""""""""""""
" TAB Bahavior
""""""""""""""""""""""""
inoremap <Tab> <C-T>
inoremap <S-Tab> <C-D>

fu! InsertTabWrapper(direction)
  let char_before = col('.') - 1
  if !char_before || getline('.')[char_before - 1] !~ '\k'
    return "\<tab>"
  elseif "backward" == a:direction
    return "\<c-p>"
  else
    return "\<c-n>"
  endif
endfu
inoremap <tab> <c-r>=InsertTabWrapper("forward")<cr>
inoremap <s-tab> <c-r>=InsertTabWrapper("backward")<cr>




""""""""""""""""""""""""
" alvan/vim-closetag
""""""""""""""""""""""""
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml,js'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ }

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'
